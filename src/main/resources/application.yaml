info:
  storeName: LOJA_A

server:
  servlet:
    context-path: /api/inventory-management/v1

queue:
  subscriber:
    exchange: subs-inventory-fanout
    queue: SEND_EVENT_INVENTORY_STORE_A_QUEUE

  publisher:
    exchange: core-exchange
    routing-key: order.update.to.core.store.a
    dead-letter-exchange: core-exchange-dlx
    dead-letter-routing-key: dlx-routing-key.store.a
    dead-letter-queue: DLQ_INVENTORY_STORE_A_QUEUE

spring:
  application:
    name: inventory-management-loja-a

  rabbitmq:
    host: localhost
    port: 5672
    username: guest
    password: guest
    listener:
      simple:
        prefetch:
        retry:
          enabled: true
          initial-interval: 10s
          max-interval: 30s
          max-attempts: 3
          multiplier: 2

  datasource:
    url: jdbc:postgresql://localhost:5433/inventory_db_loja1
    driver-class-name: org.postgresql.Driver
    username: postgres
    password: postgres

  data:
    redis:
      host: localhost
      port: 6381
      username: default
      password: default

  sql:
    init:
      mode: always

#  h2:
#    console:
#      enabled: true
#      path: /h2-console
#      settings:
#        web-allow-others: true

#  datasource:
#    url: jdbc:h2:mem:testdb
#    driver-class-name: org.h2.Driver
#    username: sa
#    password: ""


  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: create-drop
    show-sql: false
    properties:
      hibernate:
        format_sql: true
        dialect: org.hibernate.dialect.PostgreSQLDialect
    defer-datasource-initialization: true

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics, h2-console
  endpoint:
    health:
      show-details: always

#logging:
#  level:
#    org.springframework.data.jpa: INFO
#    org.hibernate.SQL: INFO
#    org.hibernate.type.descriptor.sql.BasicBinder: INFO
