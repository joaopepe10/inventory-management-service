openapi: 3.0.3
info:
  title: Sistema de Estoque Distribuído
  description: API para gerenciamento de estoque.
  version: 1.0.0
  contact:
    name: Jobisvaldo Silva
    email: contato@estoque.com
    url: https://sistema-de-estoque.com.br

servers:
  - url: '{protocol}:{url-base}/api/v1'
    variables:
      url-base:
        enum:
          -  //localhost:8080
        default: //localhost:8080
      protocol:
        enum:
          - http
          - https
        default: https
    description: Servidor de Desenvolvimento

paths:
  /products:
    get:
      tags:
        - products
      operationId: getProducts
      summary: Lista todos os produtos
      description: Retorna uma lista paginada de todos os produtos
      parameters:
        - name: page
          in: query
          description: Número da página (começa em 0)
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: Tamanho da página
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Lista de produtos retornada com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductPage'

  /products/{id}:
    get:
      tags:
        - products
      operationId: getProductById
      summary: Consulta produto por id
      description: Retorna os detalhes de um produto específico pelo seu ID
      parameters:
        - name: id
          in: path
          description: ID do produto
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Produto retornado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '404':
          description: Produto não encontrado

  /products/category/{category}:
    get:
      tags:
        - products
      operationId: getProductsByCategory
      summary: Lista todos os produtos
      description: Retorna uma lista paginada de todos os produtos
      parameters:
        - name: category
          in: path
          description: "Categoria do produto (ex: VESTUÁRIO, ELETRÔNICOS, ALIMENTOS)"
          required: true
          schema:
            type: string
        - name: page
          in: query
          description: Número da página (começa em 0)
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: Tamanho da página
          schema:
            type: integer
            default: 20

      responses:
        '200':
          description: Lista de produtos retornada com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductPage'

  /stocks:
    get:
      tags:
        - stocks
      operationId: getStocks
      summary: Lista estoques
      description: Retorna estoques por loja ou produto
      responses:
        '200':
          description: Lista de estoques
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StockResponse'

  /stocks/{id}:
    get:
      tags:
        - stocks
      operationId: getStockById
      summary: Consulta estoque por id
      description: Retorna o estoque disponível para uma determinada loja e produto
      parameters:
        - name: id
          in: path
          description: ID do estoque
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Estoque do produto retornado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StockResponse'
        '404':
          description: Estoque não encontrado

  /stocks/purchase:
    post:
      tags:
        - stocks
      operationId: purchase
      summary: Simula uma compra
      description: Simula uma compra reduzindo o estoque disponível
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PurchaseRequest'
      responses:
        '200':
          description: Compra realizada com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PurchaseResponse'
        '400':
          description: Estoque insuficiente ou dados inválidos

  /dlq/info:
    get:
      tags:
        - dead-letter-queue
      summary: Informações da Dead Letter Queue
      description: Retorna informações sobre a DLQ (quantidade de mensagens, status, etc.)
      responses:
        '200':
          description: Informações da DLQ retornadas com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DLQInfoResponse'
        '500':
          description: Erro interno do servidor

  /dlq/count:
    get:
      tags:
        - dead-letter-queue
      summary: Conta mensagens na DLQ
      description: Retorna o número de mensagens atualmente na Dead Letter Queue
      responses:
        '200':
          description: Contagem retornada com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DLQCountResponse'

  /dlq/reprocess:
    post:
      tags:
        - dead-letter-queue
      summary: Reprocessa mensagens da DLQ
      description: Reprocessa um número específico de mensagens da Dead Letter Queue, reenviando-as para a fila principal
      parameters:
        - name: maxMessages
          in: query
          description: Número máximo de mensagens para reprocessar (1-100)
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
      responses:
        '200':
          description: Mensagens reprocessadas com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DLQReprocessResponse'
        '400':
          description: Parâmetros inválidos
        '500':
          description: Erro interno do servidor

  /dlq/purge:
    delete:
      tags:
        - dead-letter-queue
      summary: Limpa completamente a DLQ
      description: Remove todas as mensagens da Dead Letter Queue permanentemente
      responses:
        '200':
          description: DLQ limpa com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DLQPurgeResponse'
        '500':
          description: Erro interno do servidor

components:
  schemas:
    CreateProductRequest:
      type: object
      properties:
        sku:
          type: string
          example: "SKU-001"
          minLength: 4
          maxLength: 12
        name:
          type: string
          example: "Camiseta Básica"
        description:
          type: string
          example: "Camiseta 100% algodão"
        price:
          type: number
          format: double
          example: 59.90
        quantity:
          type: integer
          example: 100
        category:
          type: string
          example: "Vestuário"

    ProductResponse:
      type: object
      properties:
        id:
          type: string
          example: p-001
        sku:
          type: string
          example: "550e8400-e29b-41d4-a716-446655440001"
        name:
          type: string
          example: "Camiseta Básica"
        category:
          type: string
          example: VESTUÁRIO
        description:
          type: string
          example: "Camiseta 100% algodão"
        price:
          type: number
          format: double
          example: 59.90
        totalQuantity:
          type: integer
          example: 100
        stocks:
          type: object
          items:
            $ref: "#/components/schemas/StockInformationResponse"

    ProductPage:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/ProductResponse'
        pageable:
          $ref: '#/components/schemas/PageableResponse'

    PageableResponse:
      type: object
      properties:
        pageNumber:
          type: integer
          example: 0
        pageSize:
          type: integer
          example: 20
        totalElements:
          type: integer
          example: 100
        totalPages:
          type: integer
          example: 5
        last:
          type: boolean
          example: false

    StockInformationResponse:
      type: object
      properties:
        id:
          type: string
          example: "550e8400-e29b-41d4-a716-446655440001"
        quantity:
          type: integer
        store:
          type: object
          $ref: '#/components/schemas/StoreResponse'

    StoreResponse:
      type: object
      properties:
        id:
          type: string
          example: "550e8400-e29b-41d4-a716-446655440001"
        storeCode:
          type: string
          example: "STORE001"
        name:
          type: string
          example: "Loja Centro SP"
        address:
          type: string
          example: "Rua Augusta, 123"
        city:
          type: string
          example: "São Paulo"
        state:
          type: string
          example: "SP"
        zipCode:
          type: string
          example: "01305-000"
        phone:
          type: string
          example: "(11) 1234-5678"
        email:
          type: string
          format: email
          example: "centro.sp@example.com"
        active:
          type: boolean
          example: true

    StockResponse:
      type: object
      properties:
        id:
          type: string
          example: "770e8400-e29b-41d4-a716-446655440001"
        productId:
          type: string
          example: "660e8400-e29b-41d4-a716-446655440001"
        productName:
          type: string
          example: "iPhone 15 Pro"
        productSku:
          type: string
          example: "SMARTPHONE001"
        storeId:
          type: string
          example: "550e8400-e29b-41d4-a716-446655440001"
        storeName:
          type: string
          example: "Loja Centro SP"
        storeCode:
          type: string
          example: "STORE001"
        quantity:
          type: integer
          example: 50
        isLowStock:
          type: boolean
          example: false

    PurchaseRequest:
      required:
        - productId
        - storeId
        - quantity
        - customerId
      type: object
      properties:
        productId:
          type: string
          format: uuid
          example: "660e8400-e29b-41d4-a716-446655440001"
        storeId:
          format: uuid
          type: string
          example: "550e8400-e29b-41d4-a716-446655440001"
        quantity:
          type: integer
          example: 2
          minimum: 1
        customerId:
          type: string
          example: "550e8400-e29b-41d4-a716-446655440001"

    PurchaseResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Compra realizada com sucesso"
        orderId:
          type: string
          example: "ORDER-2024-001"
        productName:
          type: string
          example: "iPhone 15 Pro"
        storeName:
          type: string
          example: "Loja Centro SP"
        quantityPurchased:
          type: integer
          example: 2
        remainingStock:
          type: integer
          example: 43

    DLQInfoResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        dlq:
          type: object
          properties:
            queueName:
              type: string
              example: "process.update.inventory.queue.dlq"
            messageCount:
              type: integer
              example: 5
            consumerCount:
              type: integer
              example: 0
            available:
              type: boolean
              example: true
            error:
              type: string
              example: ""

    DLQCountResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        messageCount:
          type: integer
          example: 10
        queueName:
          type: string
          example: "process.update.inventory.queue.dlq"

    DLQReprocessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Mensagens reprocessadas com sucesso"
        processedCount:
          type: integer
          example: 5
        requestedCount:
          type: integer
          example: 10

    DLQPurgeResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "DLQ limpa com sucesso"
        purgedCount:
          type: integer
          example: 15
